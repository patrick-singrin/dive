/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BadgeType } from "./components/Badge/Badge";
import { BlueprintChangeEvent, BlueprintContent, BlueprintSize, BlueprintVariant } from "./components/_Blueprint/Blueprint";
import { ChipSize, ChipType, ChipVariant } from "./components/Chip/Chip";
export { BadgeType } from "./components/Badge/Badge";
export { BlueprintChangeEvent, BlueprintContent, BlueprintSize, BlueprintVariant } from "./components/_Blueprint/Blueprint";
export { ChipSize, ChipType, ChipVariant } from "./components/Chip/Chip";
export namespace Components {
    interface DiveBadge {
        /**
          * @default ''
         */
        "text": string;
        /**
          * @default 'base'
         */
        "type": BadgeType;
    }
    /**
     * Blueprint Component
     * A comprehensive template component that demonstrates all patterns and conventions
     * for creating Stencil Web Components in this project.
     */
    interface DiveBlueprint {
        /**
          * @default ''
         */
        "ariaDescribedBy": string;
        /**
          * ARIA and accessibility properties
          * @default ''
         */
        "ariaLabel": string;
        /**
          * The content type/layout
          * @default 'text'
         */
        "content": BlueprintContent;
        /**
          * Secondary text or description
          * @default ''
         */
        "description": string;
        /**
          * Whether the component is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * Whether to show an avatar
          * @default false
         */
        "hasAvatar": boolean;
        /**
          * Whether to show an icon
          * @default false
         */
        "hasIcon": boolean;
        /**
          * Form-related properties
          * @default ''
         */
        "name": string;
        /**
          * @default false
         */
        "required": boolean;
        /**
          * The size of the component
          * @default 'medium'
         */
        "size": BlueprintSize;
        /**
          * The main text content
          * @default ''
         */
        "text": string;
        /**
          * @default ''
         */
        "value": string;
        /**
          * The visual variant/type of the component
          * @default 'primary'
         */
        "variant": BlueprintVariant;
    }
    interface DiveChip {
        /**
          * @default true
         */
        "clickable": boolean;
        /**
          * @default false
         */
        "disabled": boolean;
        "icon"?: string;
        /**
          * @default false
         */
        "iconOnly": boolean;
        /**
          * @default false
         */
        "removable": boolean;
        /**
          * @default 'medium'
         */
        "size": ChipSize;
        /**
          * @default ''
         */
        "text": string;
        /**
          * @default 'base'
         */
        "type": ChipType;
        /**
          * @default 'outline'
         */
        "variant": ChipVariant;
    }
    interface DiveIcon {
        "color"?: string;
        "name": string;
        /**
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * @default 2
         */
        "strokeWidth": number;
        /**
          * @default 'outline'
         */
        "variant": 'outline' | 'filled';
    }
}
export interface DiveBlueprintCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDiveBlueprintElement;
}
export interface DiveChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDiveChipElement;
}
declare global {
    interface HTMLDiveBadgeElement extends Components.DiveBadge, HTMLStencilElement {
    }
    var HTMLDiveBadgeElement: {
        prototype: HTMLDiveBadgeElement;
        new (): HTMLDiveBadgeElement;
    };
    interface HTMLDiveBlueprintElementEventMap {
        "blueprintChange": BlueprintChangeEvent;
        "blueprintClick": MouseEvent;
        "blueprintFocus": FocusEvent;
        "blueprintBlur": FocusEvent;
    }
    /**
     * Blueprint Component
     * A comprehensive template component that demonstrates all patterns and conventions
     * for creating Stencil Web Components in this project.
     */
    interface HTMLDiveBlueprintElement extends Components.DiveBlueprint, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDiveBlueprintElementEventMap>(type: K, listener: (this: HTMLDiveBlueprintElement, ev: DiveBlueprintCustomEvent<HTMLDiveBlueprintElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDiveBlueprintElementEventMap>(type: K, listener: (this: HTMLDiveBlueprintElement, ev: DiveBlueprintCustomEvent<HTMLDiveBlueprintElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDiveBlueprintElement: {
        prototype: HTMLDiveBlueprintElement;
        new (): HTMLDiveBlueprintElement;
    };
    interface HTMLDiveChipElementEventMap {
        "chipClick": void;
        "chipRemove": void;
    }
    interface HTMLDiveChipElement extends Components.DiveChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDiveChipElementEventMap>(type: K, listener: (this: HTMLDiveChipElement, ev: DiveChipCustomEvent<HTMLDiveChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDiveChipElementEventMap>(type: K, listener: (this: HTMLDiveChipElement, ev: DiveChipCustomEvent<HTMLDiveChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDiveChipElement: {
        prototype: HTMLDiveChipElement;
        new (): HTMLDiveChipElement;
    };
    interface HTMLDiveIconElement extends Components.DiveIcon, HTMLStencilElement {
    }
    var HTMLDiveIconElement: {
        prototype: HTMLDiveIconElement;
        new (): HTMLDiveIconElement;
    };
    interface HTMLElementTagNameMap {
        "dive-badge": HTMLDiveBadgeElement;
        "dive-blueprint": HTMLDiveBlueprintElement;
        "dive-chip": HTMLDiveChipElement;
        "dive-icon": HTMLDiveIconElement;
    }
}
declare namespace LocalJSX {
    interface DiveBadge {
        /**
          * @default ''
         */
        "text"?: string;
        /**
          * @default 'base'
         */
        "type"?: BadgeType;
    }
    /**
     * Blueprint Component
     * A comprehensive template component that demonstrates all patterns and conventions
     * for creating Stencil Web Components in this project.
     */
    interface DiveBlueprint {
        /**
          * @default ''
         */
        "ariaDescribedBy"?: string;
        /**
          * ARIA and accessibility properties
          * @default ''
         */
        "ariaLabel"?: string;
        /**
          * The content type/layout
          * @default 'text'
         */
        "content"?: BlueprintContent;
        /**
          * Secondary text or description
          * @default ''
         */
        "description"?: string;
        /**
          * Whether the component is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Whether to show an avatar
          * @default false
         */
        "hasAvatar"?: boolean;
        /**
          * Whether to show an icon
          * @default false
         */
        "hasIcon"?: boolean;
        /**
          * Form-related properties
          * @default ''
         */
        "name"?: string;
        /**
          * Emitted when component loses focus
         */
        "onBlueprintBlur"?: (event: DiveBlueprintCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when component value changes
         */
        "onBlueprintChange"?: (event: DiveBlueprintCustomEvent<BlueprintChangeEvent>) => void;
        /**
          * Emitted when component is clicked
         */
        "onBlueprintClick"?: (event: DiveBlueprintCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when component gains focus
         */
        "onBlueprintFocus"?: (event: DiveBlueprintCustomEvent<FocusEvent>) => void;
        /**
          * @default false
         */
        "required"?: boolean;
        /**
          * The size of the component
          * @default 'medium'
         */
        "size"?: BlueprintSize;
        /**
          * The main text content
          * @default ''
         */
        "text"?: string;
        /**
          * @default ''
         */
        "value"?: string;
        /**
          * The visual variant/type of the component
          * @default 'primary'
         */
        "variant"?: BlueprintVariant;
    }
    interface DiveChip {
        /**
          * @default true
         */
        "clickable"?: boolean;
        /**
          * @default false
         */
        "disabled"?: boolean;
        "icon"?: string;
        /**
          * @default false
         */
        "iconOnly"?: boolean;
        "onChipClick"?: (event: DiveChipCustomEvent<void>) => void;
        "onChipRemove"?: (event: DiveChipCustomEvent<void>) => void;
        /**
          * @default false
         */
        "removable"?: boolean;
        /**
          * @default 'medium'
         */
        "size"?: ChipSize;
        /**
          * @default ''
         */
        "text"?: string;
        /**
          * @default 'base'
         */
        "type"?: ChipType;
        /**
          * @default 'outline'
         */
        "variant"?: ChipVariant;
    }
    interface DiveIcon {
        "color"?: string;
        "name": string;
        /**
          * @default 'medium'
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * @default 2
         */
        "strokeWidth"?: number;
        /**
          * @default 'outline'
         */
        "variant"?: 'outline' | 'filled';
    }
    interface IntrinsicElements {
        "dive-badge": DiveBadge;
        "dive-blueprint": DiveBlueprint;
        "dive-chip": DiveChip;
        "dive-icon": DiveIcon;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dive-badge": LocalJSX.DiveBadge & JSXBase.HTMLAttributes<HTMLDiveBadgeElement>;
            /**
             * Blueprint Component
             * A comprehensive template component that demonstrates all patterns and conventions
             * for creating Stencil Web Components in this project.
             */
            "dive-blueprint": LocalJSX.DiveBlueprint & JSXBase.HTMLAttributes<HTMLDiveBlueprintElement>;
            "dive-chip": LocalJSX.DiveChip & JSXBase.HTMLAttributes<HTMLDiveChipElement>;
            "dive-icon": LocalJSX.DiveIcon & JSXBase.HTMLAttributes<HTMLDiveIconElement>;
        }
    }
}
